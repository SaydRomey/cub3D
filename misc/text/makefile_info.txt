


# **************************************************************************** #
# info
# **************************************************************************** #

# OPENGL is a cross-platform API for rendering 2D and 3D graphics.

# GLFW is a library that provides a simple API for 
#	creating windows, contexts and surfaces, receiving input and events.

# explaining the LIBRARIESvariable:
# -L$(GLFW_DIR)		: tells the compiler where to find the GLFW library
# (the '-L' is a flag that tells the compiler to look in the directory that follows for the library)

# $(MLX42) $(LIBFT)	: tells the compiler to link the MLX42 and LIBFT libraries (the .a files)


# (the '-l' is a flag that tells the compiler to link the library that follows)
# -lglfw			: tells the compiler to link the GLFW library
# -ldl				: tells the compiler to link the dynamic loading library
# -pthread			: tells the compiler to link the pthread library
# -lm				: tells the compiler to link the math library

# (glfw : the name of the library, without the 'lib' prefix and the '.a' suffix,
# 	used for managing windows, contexts, surfaces, input and events)

# the (3) after -lglfw is a version specifier indicating 
# a specific version of the GLFW library to link against.
# On macOS (which uses the Mach-O binary format), 
# frameworks are used to link libraries. 
# The -lglfw(3) syntax is specific to macOS and 
# denotes linking against GLFW version 3.
# On Linux (which typically uses the ELF binary format), 
# libraries are linked using the -l option 
# followed by the library name without a version specifier.

# (dl : used for dynamic loading) (meaning that it loads libraries at runtime)

# (pthread : used for multithreading)
# (links the program with the POSIX threads library,
# enabling multithreading capabilities in the resulting executable,
# allowing for concurrent execution of tasks across multiple threads.)

# (m : used for math)
# (even if we include the math.h header file, we still need to link the math library,
# because the math.h header file only contains the declarations of the math functions,
# not the actual code that implements them)
# ///

# := (Simple Assignment):

# Variables assigned with := use immediate or simple assignment.
# The right-hand side of the assignment is expanded once at the time of assignment.
# The variable value will remain the same throughout the makefile, 
# even if the value of other variables changes later.
# This type of assignment is useful when you want to evaluate the value only once 
# and have a fixed value for the variable.

# = (Recursive Assignment):

# Variables assigned with = use recursive assignment.
# The right-hand side of the assignment is not expanded immediately; 
# instead, it is expanded whenever the variable is used.
# The variable value will be evaluated each time it is referenced, 
# allowing for dynamic or delayed evaluation.
# This type of assignment is useful when you want the variable to reflect changes in other variables 
# or when you want the value to be evaluated at the time of usage.




# ///
# The -j4 flag enables parallel compilation by running up to four simultaneous jobs,
# improving build time by utilizing multiple cores or threads.

